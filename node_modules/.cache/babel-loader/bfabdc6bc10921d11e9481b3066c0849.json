{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maxfield\\\\desktop\\\\travsite\\\\traviswebsite\\\\src\\\\components\\\\CustomScrollDiv.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SCROLL_BOX_MIN_HEIGHT = 20;\nexport default function CustomScrollDiv({\n  children,\n  className,\n  ...restProps\n}) {\n  _s();\n\n  const [hovering, setHovering] = useState(false);\n  const [scrollBoxHeight, setScrollBoxHeight] = useState(SCROLL_BOX_MIN_HEIGHT);\n  const [scrollBoxTop, setScrollBoxTop] = useState(0);\n  const [lastScrollThumbPosition, setScrollThumbPosition] = useState(0);\n  const [isDragging, setDragging] = useState(false);\n  const handleMouseOver = useCallback(() => {\n    !hovering && setHovering(true);\n  }, [hovering]);\n  const handleMouseOut = useCallback(() => {\n    !!hovering && setHovering(false);\n  }, [hovering]);\n  const handleDocumentMouseUp = useCallback(e => {\n    if (isDragging) {\n      e.preventDefault();\n      setDragging(false);\n    }\n  }, [isDragging]);\n  const handleDocumentMouseMove = useCallback(e => {\n    if (isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n      const scrollHostElement = scrollHostRef.current;\n      const {\n        scrollHeight,\n        offsetHeight\n      } = scrollHostElement;\n      let deltaY = e.clientY - lastScrollThumbPosition;\n      let percentage = deltaY * (scrollHeight / offsetHeight);\n      setScrollThumbPosition(e.clientY);\n      setScrollBoxTop(Math.min(Math.max(0, scrollBoxTop + deltaY), offsetHeight - scrollBoxHeight));\n      scrollHostElement.scrollTop = Math.min(scrollHostElement.scrollTop + percentage, scrollHeight - offsetHeight);\n    }\n  }, [isDragging, lastScrollThumbPosition, scrollBoxHeight, scrollBoxTop]);\n  const handleScrollThumbMouseDown = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setScrollThumbPosition(e.clientY);\n    setDragging(true);\n    console.log(\"handleScrollThumbMouseDown\");\n  }, []);\n  const handleScroll = useCallback(() => {\n    if (!scrollHostRef) {\n      return;\n    }\n\n    const scrollHostElement = scrollHostRef.current;\n    const {\n      scrollTop,\n      scrollHeight,\n      offsetHeight\n    } = scrollHostElement;\n    let newTop = parseInt(scrollTop, 10) / parseInt(scrollHeight, 10) * offsetHeight; // newTop = newTop + parseInt(scrollTop, 10);\n\n    newTop = Math.min(newTop, offsetHeight - scrollBoxHeight);\n    setScrollBoxTop(newTop);\n  }, []);\n  const scrollHostRef = useRef();\n  useEffect(() => {\n    const scrollHostElement = scrollHostRef.current;\n    const {\n      clientHeight,\n      scrollHeight\n    } = scrollHostElement;\n    const scrollThumbPercentage = clientHeight / scrollHeight;\n    const scrollThumbHeight = Math.max(scrollThumbPercentage * clientHeight, SCROLL_BOX_MIN_HEIGHT);\n    setScrollBoxHeight(scrollThumbHeight);\n    scrollHostElement.addEventListener(\"scroll\", handleScroll, true);\n    return function cleanup() {\n      scrollHostElement.removeEventListener(\"scroll\", handleScroll, true);\n    };\n  }, []);\n  useEffect(() => {\n    //this is handle the dragging on scroll-thumb\n    document.addEventListener(\"mousemove\", handleDocumentMouseMove);\n    document.addEventListener(\"mouseup\", handleDocumentMouseUp);\n    document.addEventListener(\"mouseleave\", handleDocumentMouseUp);\n    return function cleanup() {\n      document.removeEventListener(\"mousemove\", handleDocumentMouseMove);\n      document.removeEventListener(\"mouseup\", handleDocumentMouseUp);\n      document.removeEventListener(\"mouseleave\", handleDocumentMouseUp);\n    };\n  }, [handleDocumentMouseMove, handleDocumentMouseUp]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scrollhost-container\",\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: scrollHostRef,\n      className: `scrollhost ${className}`,\n      ...restProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-bar\",\n      style: {\n        opacity: hovering ? 1 : 0\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scroll-thumb\",\n        style: {\n          top: scrollBoxTop\n        },\n        onMouseDown: handleScrollThumbMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomScrollDiv, \"/izvW2rlct2FCciM/PlL53wCIDc=\");\n\n_c = CustomScrollDiv;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomScrollDiv\");","map":{"version":3,"sources":["C:/Users/Maxfield/desktop/travsite/traviswebsite/src/components/CustomScrollDiv.js"],"names":["React","useState","useCallback","useEffect","useRef","SCROLL_BOX_MIN_HEIGHT","CustomScrollDiv","children","className","restProps","hovering","setHovering","scrollBoxHeight","setScrollBoxHeight","scrollBoxTop","setScrollBoxTop","lastScrollThumbPosition","setScrollThumbPosition","isDragging","setDragging","handleMouseOver","handleMouseOut","handleDocumentMouseUp","e","preventDefault","handleDocumentMouseMove","stopPropagation","scrollHostElement","scrollHostRef","current","scrollHeight","offsetHeight","deltaY","clientY","percentage","Math","min","max","scrollTop","handleScrollThumbMouseDown","console","log","handleScroll","newTop","parseInt","clientHeight","scrollThumbPercentage","scrollThumbHeight","addEventListener","cleanup","removeEventListener","document","opacity","top"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\n\r\nconst SCROLL_BOX_MIN_HEIGHT = 20;\r\n\r\nexport default function CustomScrollDiv({ children, className, ...restProps }) {\r\n  const [hovering, setHovering] = useState(false);\r\n  const [scrollBoxHeight, setScrollBoxHeight] = useState(SCROLL_BOX_MIN_HEIGHT);\r\n  const [scrollBoxTop, setScrollBoxTop] = useState(0);\r\n  const [lastScrollThumbPosition, setScrollThumbPosition] = useState(0);\r\n  const [isDragging, setDragging] = useState(false);\r\n\r\n  const handleMouseOver = useCallback(() => {\r\n    !hovering && setHovering(true);\r\n  }, [hovering]);\r\n\r\n  const handleMouseOut = useCallback(() => {\r\n    !!hovering && setHovering(false);\r\n  }, [hovering]);\r\n\r\n  const handleDocumentMouseUp = useCallback(\r\n    e => {\r\n      if (isDragging) {\r\n        e.preventDefault();\r\n        setDragging(false);\r\n      }\r\n    },\r\n    [isDragging]\r\n  );\r\n\r\n  const handleDocumentMouseMove = useCallback(\r\n    e => {\r\n      if (isDragging) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const scrollHostElement = scrollHostRef.current;\r\n        const { scrollHeight, offsetHeight } = scrollHostElement;\r\n\r\n        let deltaY = e.clientY - lastScrollThumbPosition;\r\n        let percentage = deltaY * (scrollHeight / offsetHeight);\r\n\r\n        setScrollThumbPosition(e.clientY);\r\n        setScrollBoxTop(\r\n          Math.min(\r\n            Math.max(0, scrollBoxTop + deltaY),\r\n            offsetHeight - scrollBoxHeight\r\n          )\r\n        );\r\n        scrollHostElement.scrollTop = Math.min(\r\n          scrollHostElement.scrollTop + percentage,\r\n          scrollHeight - offsetHeight\r\n        );\r\n      }\r\n    },\r\n    [isDragging, lastScrollThumbPosition, scrollBoxHeight, scrollBoxTop]\r\n  );\r\n\r\n  const handleScrollThumbMouseDown = useCallback(e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setScrollThumbPosition(e.clientY);\r\n    setDragging(true);\r\n    console.log(\"handleScrollThumbMouseDown\");\r\n  }, []);\r\n\r\n  const handleScroll = useCallback(() => {\r\n    if (!scrollHostRef) {\r\n      return;\r\n    }\r\n    const scrollHostElement = scrollHostRef.current;\r\n    const { scrollTop, scrollHeight, offsetHeight } = scrollHostElement;\r\n\r\n    let newTop =\r\n      (parseInt(scrollTop, 10) / parseInt(scrollHeight, 10)) * offsetHeight;\r\n    // newTop = newTop + parseInt(scrollTop, 10);\r\n    newTop = Math.min(newTop, offsetHeight - scrollBoxHeight);\r\n    setScrollBoxTop(newTop);\r\n  }, []);\r\n\r\n  const scrollHostRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const scrollHostElement = scrollHostRef.current;\r\n    const { clientHeight, scrollHeight } = scrollHostElement;\r\n    const scrollThumbPercentage = clientHeight / scrollHeight;\r\n    const scrollThumbHeight = Math.max(\r\n      scrollThumbPercentage * clientHeight,\r\n      SCROLL_BOX_MIN_HEIGHT\r\n    );\r\n    setScrollBoxHeight(scrollThumbHeight);\r\n    scrollHostElement.addEventListener(\"scroll\", handleScroll, true);\r\n    return function cleanup() {\r\n      scrollHostElement.removeEventListener(\"scroll\", handleScroll, true);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //this is handle the dragging on scroll-thumb\r\n    document.addEventListener(\"mousemove\", handleDocumentMouseMove);\r\n    document.addEventListener(\"mouseup\", handleDocumentMouseUp);\r\n    document.addEventListener(\"mouseleave\", handleDocumentMouseUp);\r\n    return function cleanup() {\r\n      document.removeEventListener(\"mousemove\", handleDocumentMouseMove);\r\n      document.removeEventListener(\"mouseup\", handleDocumentMouseUp);\r\n      document.removeEventListener(\"mouseleave\", handleDocumentMouseUp);\r\n    };\r\n  }, [handleDocumentMouseMove, handleDocumentMouseUp]);\r\n\r\n  return (\r\n    <div\r\n      className={\"scrollhost-container\"}\r\n      onMouseOver={handleMouseOver}\r\n      onMouseOut={handleMouseOut}\r\n    >\r\n      <div\r\n        ref={scrollHostRef}\r\n        className={`scrollhost ${className}`}\r\n        {...restProps}\r\n      >\r\n        {children}\r\n      </div>\r\n      <div className={\"scroll-bar\"} style={{ opacity: hovering ? 1 : 0 }}>\r\n        <div\r\n          className={\"scroll-thumb\"}\r\n          style={{ top: scrollBoxTop }}\r\n          onMouseDown={handleScrollThumbMouseDown}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}